/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ImprovedMLM_BSCInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_LEVELS"
      | "MAX_REFERRAL_LINES"
      | "REGISTRATION_PRICE"
      | "REWARD_PAYOUTS"
      | "REWARD_PERCENT"
      | "buyLevel"
      | "emergencyWithdraw"
      | "getAllLevelPrices"
      | "getContractBalance"
      | "getGlobalStats"
      | "getPlaceInQueue"
      | "getUser"
      | "getUserLevels"
      | "globalStat"
      | "headIndex"
      | "isUserRegistered"
      | "levelPrices"
      | "levelQueue"
      | "minUsersForLevel"
      | "owner"
      | "pause"
      | "paused"
      | "referralRewardPercents"
      | "register"
      | "registerWithReferrer"
      | "renounceOwnership"
      | "setTokenBurner"
      | "tokenBurner"
      | "transferOwnership"
      | "unpause"
      | "users"
      | "usersAddressById"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BuyLevel"
      | "IncreaseLevelMaxPayouts"
      | "LevelDeactivation"
      | "LevelPayout"
      | "MissedReferralPayout"
      | "OwnershipTransferred"
      | "Paused"
      | "ReferralPayout"
      | "TokenBurnerUpdated"
      | "Unpaused"
      | "UserRegistration"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_LEVELS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REFERRAL_LINES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRATION_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_PAYOUTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllLevelPrices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlaceInQueue",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLevels",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalStat",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "headIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "levelPrices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "levelQueue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minUsersForLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referralRewardPercents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "register", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerWithReferrer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenBurner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBurner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "users", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "usersAddressById",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_LEVELS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REFERRAL_LINES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRATION_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_PAYOUTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyLevel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllLevelPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlaceInQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "globalStat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "headIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUserRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "levelPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levelQueue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minUsersForLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralRewardPercents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerWithReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenBurner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBurner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usersAddressById",
    data: BytesLike
  ): Result;
}

export namespace BuyLevelEvent {
  export type InputTuple = [
    userId: BigNumberish,
    level: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [userId: bigint, level: bigint, value: bigint];
  export interface OutputObject {
    userId: bigint;
    level: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreaseLevelMaxPayoutsEvent {
  export type InputTuple = [
    userId: BigNumberish,
    level: BigNumberish,
    newMaxPayouts: BigNumberish
  ];
  export type OutputTuple = [
    userId: bigint,
    level: bigint,
    newMaxPayouts: bigint
  ];
  export interface OutputObject {
    userId: bigint;
    level: bigint;
    newMaxPayouts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LevelDeactivationEvent {
  export type InputTuple = [userId: BigNumberish, level: BigNumberish];
  export type OutputTuple = [userId: bigint, level: bigint];
  export interface OutputObject {
    userId: bigint;
    level: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LevelPayoutEvent {
  export type InputTuple = [
    userId: BigNumberish,
    level: BigNumberish,
    rewardValue: BigNumberish,
    fromUserId: BigNumberish
  ];
  export type OutputTuple = [
    userId: bigint,
    level: bigint,
    rewardValue: bigint,
    fromUserId: bigint
  ];
  export interface OutputObject {
    userId: bigint;
    level: bigint;
    rewardValue: bigint;
    fromUserId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MissedReferralPayoutEvent {
  export type InputTuple = [
    referrerId: BigNumberish,
    referralId: BigNumberish,
    level: BigNumberish,
    rewardValue: BigNumberish
  ];
  export type OutputTuple = [
    referrerId: bigint,
    referralId: bigint,
    level: bigint,
    rewardValue: bigint
  ];
  export interface OutputObject {
    referrerId: bigint;
    referralId: bigint;
    level: bigint;
    rewardValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralPayoutEvent {
  export type InputTuple = [
    referrerId: BigNumberish,
    referralId: BigNumberish,
    level: BigNumberish,
    rewardValue: BigNumberish
  ];
  export type OutputTuple = [
    referrerId: bigint,
    referralId: bigint,
    level: bigint,
    rewardValue: bigint
  ];
  export interface OutputObject {
    referrerId: bigint;
    referralId: bigint;
    level: bigint;
    rewardValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenBurnerUpdatedEvent {
  export type InputTuple = [oldBurner: AddressLike, newBurner: AddressLike];
  export type OutputTuple = [oldBurner: string, newBurner: string];
  export interface OutputObject {
    oldBurner: string;
    newBurner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegistrationEvent {
  export type InputTuple = [
    userId: BigNumberish,
    referrerId: BigNumberish,
    userAddress: AddressLike
  ];
  export type OutputTuple = [
    userId: bigint,
    referrerId: bigint,
    userAddress: string
  ];
  export interface OutputObject {
    userId: bigint;
    referrerId: bigint;
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ImprovedMLM_BSC extends BaseContract {
  connect(runner?: ContractRunner | null): ImprovedMLM_BSC;
  waitForDeployment(): Promise<this>;

  interface: ImprovedMLM_BSCInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_LEVELS: TypedContractMethod<[], [bigint], "view">;

  MAX_REFERRAL_LINES: TypedContractMethod<[], [bigint], "view">;

  REGISTRATION_PRICE: TypedContractMethod<[], [bigint], "view">;

  REWARD_PAYOUTS: TypedContractMethod<[], [bigint], "view">;

  REWARD_PERCENT: TypedContractMethod<[], [bigint], "view">;

  buyLevel: TypedContractMethod<[level: BigNumberish], [void], "payable">;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getAllLevelPrices: TypedContractMethod<[], [bigint[]], "view">;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getGlobalStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        members: bigint;
        transactions: bigint;
        turnover: bigint;
      }
    ],
    "view"
  >;

  getPlaceInQueue: TypedContractMethod<
    [userAddress: AddressLike, level: BigNumberish],
    [[bigint, bigint] & { place: bigint; totalInQueue: bigint }],
    "view"
  >;

  getUser: TypedContractMethod<
    [userAddress: AddressLike],
    [
      [bigint, bigint, bigint, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        registrationTimestamp: bigint;
        referrerId: bigint;
        referrer: string;
        referrals: bigint;
        referralPayoutSum: bigint;
        levelsRewardSum: bigint;
        missedReferralPayoutSum: bigint;
      }
    ],
    "view"
  >;

  getUserLevels: TypedContractMethod<
    [userAddress: AddressLike],
    [
      [boolean[], bigint[], bigint[], bigint[], bigint[], bigint[]] & {
        active: boolean[];
        payouts: bigint[];
        maxPayouts: bigint[];
        activationTimes: bigint[];
        rewardSum: bigint[];
        referralPayoutSum: bigint[];
      }
    ],
    "view"
  >;

  globalStat: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        members: bigint;
        transactions: bigint;
        turnover: bigint;
      }
    ],
    "view"
  >;

  headIndex: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  isUserRegistered: TypedContractMethod<
    [userAddress: AddressLike],
    [boolean],
    "view"
  >;

  levelPrices: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  levelQueue: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  minUsersForLevel: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  referralRewardPercents: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  register: TypedContractMethod<[], [void], "payable">;

  registerWithReferrer: TypedContractMethod<
    [referrer: AddressLike],
    [void],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setTokenBurner: TypedContractMethod<
    [_tokenBurner: AddressLike],
    [void],
    "nonpayable"
  >;

  tokenBurner: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  users: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        registrationTimestamp: bigint;
        referrer: string;
        referrals: bigint;
        referralPayoutSum: bigint;
        levelsRewardSum: bigint;
        missedReferralPayoutSum: bigint;
      }
    ],
    "view"
  >;

  usersAddressById: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_LEVELS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_REFERRAL_LINES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REGISTRATION_PRICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REWARD_PAYOUTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REWARD_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyLevel"
  ): TypedContractMethod<[level: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllLevelPrices"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGlobalStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        members: bigint;
        transactions: bigint;
        turnover: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlaceInQueue"
  ): TypedContractMethod<
    [userAddress: AddressLike, level: BigNumberish],
    [[bigint, bigint] & { place: bigint; totalInQueue: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUser"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [
      [bigint, bigint, bigint, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        registrationTimestamp: bigint;
        referrerId: bigint;
        referrer: string;
        referrals: bigint;
        referralPayoutSum: bigint;
        levelsRewardSum: bigint;
        missedReferralPayoutSum: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserLevels"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [
      [boolean[], bigint[], bigint[], bigint[], bigint[], bigint[]] & {
        active: boolean[];
        payouts: bigint[];
        maxPayouts: bigint[];
        activationTimes: bigint[];
        rewardSum: bigint[];
        referralPayoutSum: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalStat"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        members: bigint;
        transactions: bigint;
        turnover: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "headIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isUserRegistered"
  ): TypedContractMethod<[userAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "levelPrices"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "levelQueue"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "minUsersForLevel"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "referralRewardPercents"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "registerWithReferrer"
  ): TypedContractMethod<[referrer: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenBurner"
  ): TypedContractMethod<[_tokenBurner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenBurner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        registrationTimestamp: bigint;
        referrer: string;
        referrals: bigint;
        referralPayoutSum: bigint;
        levelsRewardSum: bigint;
        missedReferralPayoutSum: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "usersAddressById"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "BuyLevel"
  ): TypedContractEvent<
    BuyLevelEvent.InputTuple,
    BuyLevelEvent.OutputTuple,
    BuyLevelEvent.OutputObject
  >;
  getEvent(
    key: "IncreaseLevelMaxPayouts"
  ): TypedContractEvent<
    IncreaseLevelMaxPayoutsEvent.InputTuple,
    IncreaseLevelMaxPayoutsEvent.OutputTuple,
    IncreaseLevelMaxPayoutsEvent.OutputObject
  >;
  getEvent(
    key: "LevelDeactivation"
  ): TypedContractEvent<
    LevelDeactivationEvent.InputTuple,
    LevelDeactivationEvent.OutputTuple,
    LevelDeactivationEvent.OutputObject
  >;
  getEvent(
    key: "LevelPayout"
  ): TypedContractEvent<
    LevelPayoutEvent.InputTuple,
    LevelPayoutEvent.OutputTuple,
    LevelPayoutEvent.OutputObject
  >;
  getEvent(
    key: "MissedReferralPayout"
  ): TypedContractEvent<
    MissedReferralPayoutEvent.InputTuple,
    MissedReferralPayoutEvent.OutputTuple,
    MissedReferralPayoutEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralPayout"
  ): TypedContractEvent<
    ReferralPayoutEvent.InputTuple,
    ReferralPayoutEvent.OutputTuple,
    ReferralPayoutEvent.OutputObject
  >;
  getEvent(
    key: "TokenBurnerUpdated"
  ): TypedContractEvent<
    TokenBurnerUpdatedEvent.InputTuple,
    TokenBurnerUpdatedEvent.OutputTuple,
    TokenBurnerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistration"
  ): TypedContractEvent<
    UserRegistrationEvent.InputTuple,
    UserRegistrationEvent.OutputTuple,
    UserRegistrationEvent.OutputObject
  >;

  filters: {
    "BuyLevel(uint256,uint8,uint256)": TypedContractEvent<
      BuyLevelEvent.InputTuple,
      BuyLevelEvent.OutputTuple,
      BuyLevelEvent.OutputObject
    >;
    BuyLevel: TypedContractEvent<
      BuyLevelEvent.InputTuple,
      BuyLevelEvent.OutputTuple,
      BuyLevelEvent.OutputObject
    >;

    "IncreaseLevelMaxPayouts(uint256,uint8,uint16)": TypedContractEvent<
      IncreaseLevelMaxPayoutsEvent.InputTuple,
      IncreaseLevelMaxPayoutsEvent.OutputTuple,
      IncreaseLevelMaxPayoutsEvent.OutputObject
    >;
    IncreaseLevelMaxPayouts: TypedContractEvent<
      IncreaseLevelMaxPayoutsEvent.InputTuple,
      IncreaseLevelMaxPayoutsEvent.OutputTuple,
      IncreaseLevelMaxPayoutsEvent.OutputObject
    >;

    "LevelDeactivation(uint256,uint8)": TypedContractEvent<
      LevelDeactivationEvent.InputTuple,
      LevelDeactivationEvent.OutputTuple,
      LevelDeactivationEvent.OutputObject
    >;
    LevelDeactivation: TypedContractEvent<
      LevelDeactivationEvent.InputTuple,
      LevelDeactivationEvent.OutputTuple,
      LevelDeactivationEvent.OutputObject
    >;

    "LevelPayout(uint256,uint8,uint256,uint256)": TypedContractEvent<
      LevelPayoutEvent.InputTuple,
      LevelPayoutEvent.OutputTuple,
      LevelPayoutEvent.OutputObject
    >;
    LevelPayout: TypedContractEvent<
      LevelPayoutEvent.InputTuple,
      LevelPayoutEvent.OutputTuple,
      LevelPayoutEvent.OutputObject
    >;

    "MissedReferralPayout(uint256,uint256,uint8,uint256)": TypedContractEvent<
      MissedReferralPayoutEvent.InputTuple,
      MissedReferralPayoutEvent.OutputTuple,
      MissedReferralPayoutEvent.OutputObject
    >;
    MissedReferralPayout: TypedContractEvent<
      MissedReferralPayoutEvent.InputTuple,
      MissedReferralPayoutEvent.OutputTuple,
      MissedReferralPayoutEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReferralPayout(uint256,uint256,uint8,uint256)": TypedContractEvent<
      ReferralPayoutEvent.InputTuple,
      ReferralPayoutEvent.OutputTuple,
      ReferralPayoutEvent.OutputObject
    >;
    ReferralPayout: TypedContractEvent<
      ReferralPayoutEvent.InputTuple,
      ReferralPayoutEvent.OutputTuple,
      ReferralPayoutEvent.OutputObject
    >;

    "TokenBurnerUpdated(address,address)": TypedContractEvent<
      TokenBurnerUpdatedEvent.InputTuple,
      TokenBurnerUpdatedEvent.OutputTuple,
      TokenBurnerUpdatedEvent.OutputObject
    >;
    TokenBurnerUpdated: TypedContractEvent<
      TokenBurnerUpdatedEvent.InputTuple,
      TokenBurnerUpdatedEvent.OutputTuple,
      TokenBurnerUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UserRegistration(uint256,uint256,address)": TypedContractEvent<
      UserRegistrationEvent.InputTuple,
      UserRegistrationEvent.OutputTuple,
      UserRegistrationEvent.OutputObject
    >;
    UserRegistration: TypedContractEvent<
      UserRegistrationEvent.InputTuple,
      UserRegistrationEvent.OutputTuple,
      UserRegistrationEvent.OutputObject
    >;
  };
}
